import{S as zs,i as Bs,s as Us,e as a,t as i,j as c,c as o,a as l,g as n,d as s,l as d,b as de,f as p,F as t,C as Xt}from"../../chunks/index-40201def.js";function Ns(Fs){let b,qe,q,Ge,Fe,he,T,He,ue,v,Re,g,ze,Be,fe,f,h,G,Ue,Ne,F,Ve,We,H,Je,Ke,R,Qe,Xe,z,Ye,Ze,B,$e,et,U,tt,st,N,at,ot,V,lt,it,W,nt,rt,J,pt,ct,K,dt,ht,Q,ut,ft,X,mt,bt,Y,Z,vt,wt,$,ee,kt,yt,te,se,_t,Et,ae,oe,gt,It,le,ie,Pt,me,x,Tt,be,S,xt,ve,A,St,we,C,At,ke,w,Ct,ne,jt,Lt,ye,j,Dt,_e,L,Mt,Ee,k,Ot,re,qt,Gt,ge,I,Hs=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"serve:generic"</span><span class="token operator">:</span> <span class="token string">"npm run generic &amp;&amp; ionic serve"</span><span class="token punctuation">,</span>
  <span class="token property">"generic"</span><span class="token operator">:</span> <span class="token string">"npm run generic:retailer &amp;&amp; npm run generic:assets &amp;&amp; npm run generic:theme"</span><span class="token punctuation">,</span>
  <span class="token property">"generic:retailer"</span><span class="token operator">:</span> <span class="token string">"copyfiles -au 3 ".retailer/generic/app/**/*" src/app"</span><span class="token punctuation">,</span>
  <span class="token property">"generic:assets"</span><span class="token operator">:</span> <span class="token string">"copyfiles -au 3 ".retailer/generic/assets/**/*" src/assets"</span><span class="token punctuation">,</span>
  <span class="token property">"generic:theme"</span><span class="token operator">:</span> <span class="token string">"copyfiles -au 2 .retailer/generic/theme/*.scss src"</span>
<span class="token punctuation">&#125;</span></code>`,Ie,y,Ft,P,Ht,Rt,Pe,_,zt,pe,Bt,Ut,Te,D,Nt,xe,E,Vt,ce,Wt,Jt,Se,M,Kt,Ae,O,Qt;return{c(){b=a("p"),qe=i("Should be a fun little project indeed. The idea is to expand on Ionic Framework\u2019s existing "),q=a("code"),Ge=i("variables.scss"),Fe=i(" to feature colours, fonts, opacities, shadows, radii and maybe even spacing. Then in a build process, reconfigure file/(s) so that the app is built with different variables."),he=c(),T=a("h3"),He=i("Step 1: Design Tokens"),ue=c(),v=a("p"),Re=i("I found "),g=a("a"),ze=i("this great guideline"),Be=i(" from Salesforce that features all their design tokens. To be frank, it\u2019s a lot and I\u2019m not sure I need it all. There\u2019s so much just in colours alone that I decided to look at some brands as well as my app so I could determine what would be necessary and not."),fe=c(),f=a("ol"),h=a("li"),G=a("p"),Ue=i(`Colours
Main brand colour`),Ne=c(),F=a("p"),Ve=i("Alt brand colour"),We=c(),H=a("p"),Je=i("Dark (Black equivalent)"),Ke=c(),R=a("p"),Qe=i("Light (White equivalent)"),Xe=c(),z=a("p"),Ye=i("Main brand colour accessible with dark"),Ze=c(),B=a("p"),$e=i("Main brand colour accessible with light"),et=c(),U=a("p"),tt=i("Main brand colour accessible with alt"),st=c(),N=a("p"),at=i("Alt brand colour accessible with dark"),ot=c(),V=a("p"),lt=i("Alt brand colour accessible with light"),it=c(),W=a("p"),nt=i("Alt brand colour accessible with main"),rt=c(),J=a("p"),pt=i("Light background colour"),ct=c(),K=a("p"),dt=i("Gray text accessible on white"),ht=c(),Q=a("p"),ut=i("Gray text accessible on light background colour"),ft=c(),X=a("p"),mt=i("Gray text accessible on Alt brand colour accessible with main"),bt=c(),Y=a("li"),Z=a("p"),vt=i("Custom button style"),wt=c(),$=a("li"),ee=a("p"),kt=i("Border radius style"),yt=c(),te=a("li"),se=a("p"),_t=i("Side spacing"),Et=c(),ae=a("li"),oe=a("p"),gt=i(`Font/sizes:
smallbold
small
regular
subtitle
title
header`),It=c(),le=a("li"),ie=a("p"),Pt=i(`Shadows
header shadow (global.scss:177)
button shadow`),me=c(),x=a("p"),Tt=i("There are some other properties I could encorporate, but I\u2019ll start with these 6 tokens for now."),be=c(),S=a("h3"),xt=i("Step 2: Using the Tokens"),ve=c(),A=a("p"),St=i("Now that I have my tokens, I need to update my app to use them. From there I\u2019ll be able to change the tokens for each brand, and apply them to the app."),we=c(),C=a("p"),At=i("This is actually the most difficult/time-consuming part of the process because it involved looking into each and every existing colour variable reference to ensure proper accessibility. The other tokens also required individual checking to find values that were not made into variables. It took a couple days to complete."),ke=c(),w=a("p"),Ct=i("As I did this I also made a custom "),ne=a("code"),jt=i(".scss"),Lt=i(" file for each theme where I could keep new styles that are specific to a certain theme (adjusted layouts or button configurations)."),ye=c(),j=a("h3"),Dt=i("Step 3: Repo Re-Organization"),_e=c(),L=a("p"),Mt=i("I\u2019ll be using some npm scripts in order to move around finds before running my code. This was probably not the best method (that\u2019d be using Gulp), but the easiest to implement."),Ee=c(),k=a("p"),Ot=i("Here is an example of my "),re=a("code"),qt=i("package.json"),Gt=i("\u2019s npm scripts:"),ge=c(),I=a("pre"),Ie=c(),y=a("p"),Ft=i("As you can see all I\u2019m doing is moving files from a hidden folder (so it doesn\u2019t get included in build) and using "),P=a("a"),Ht=i("copyfiles"),Rt=i(" to move and replace the files."),Pe=c(),_=a("p"),zt=i("So now all I need to do to change my app\u2019s theme is to run "),pe=a("code"),Bt=i("npm run serve:theme_name"),Ut=i(" and it\u2019ll completely change the app to a custom stream I\u2019ve created."),Te=c(),D=a("h3"),Nt=i("Results and Comments"),xe=c(),E=a("p"),Vt=i("Using this method for a couple weeks has been awesome. The custom "),ce=a("code"),Wt=i(".scss"),Jt=i(" file has come in handy several times and the theme switching has worked will."),Se=c(),M=a("p"),Kt=i("The biggest problem I\u2019ve had however is maintainence and new features. Making edits to sections of the copied files means making edits to the files of each theme instance, it adds up to a lot of edits. It requires careful attention to ensure that the new edits/features work for each theme - something that\u2019s a bit unruly in practice but is managable when not rushing."),Ae=c(),O=a("p"),Qt=i("Overall this is a really cool way to extend a single codebase for multiple clients."),this.h()},l(e){b=o(e,"P",{});var r=l(b);qe=n(r,"Should be a fun little project indeed. The idea is to expand on Ionic Framework\u2019s existing "),q=o(r,"CODE",{});var Yt=l(q);Ge=n(Yt,"variables.scss"),Yt.forEach(s),Fe=n(r," to feature colours, fonts, opacities, shadows, radii and maybe even spacing. Then in a build process, reconfigure file/(s) so that the app is built with different variables."),r.forEach(s),he=d(e),T=o(e,"H3",{});var Zt=l(T);He=n(Zt,"Step 1: Design Tokens"),Zt.forEach(s),ue=d(e),v=o(e,"P",{});var Ce=l(v);Re=n(Ce,"I found "),g=o(Ce,"A",{href:!0,rel:!0});var $t=l(g);ze=n($t,"this great guideline"),$t.forEach(s),Be=n(Ce," from Salesforce that features all their design tokens. To be frank, it\u2019s a lot and I\u2019m not sure I need it all. There\u2019s so much just in colours alone that I decided to look at some brands as well as my app so I could determine what would be necessary and not."),Ce.forEach(s),fe=d(e),f=o(e,"OL",{});var m=l(f);h=o(m,"LI",{});var u=l(h);G=o(u,"P",{});var es=l(G);Ue=n(es,`Colours
Main brand colour`),es.forEach(s),Ne=d(u),F=o(u,"P",{});var ts=l(F);Ve=n(ts,"Alt brand colour"),ts.forEach(s),We=d(u),H=o(u,"P",{});var ss=l(H);Je=n(ss,"Dark (Black equivalent)"),ss.forEach(s),Ke=d(u),R=o(u,"P",{});var as=l(R);Qe=n(as,"Light (White equivalent)"),as.forEach(s),Xe=d(u),z=o(u,"P",{});var os=l(z);Ye=n(os,"Main brand colour accessible with dark"),os.forEach(s),Ze=d(u),B=o(u,"P",{});var ls=l(B);$e=n(ls,"Main brand colour accessible with light"),ls.forEach(s),et=d(u),U=o(u,"P",{});var is=l(U);tt=n(is,"Main brand colour accessible with alt"),is.forEach(s),st=d(u),N=o(u,"P",{});var ns=l(N);at=n(ns,"Alt brand colour accessible with dark"),ns.forEach(s),ot=d(u),V=o(u,"P",{});var rs=l(V);lt=n(rs,"Alt brand colour accessible with light"),rs.forEach(s),it=d(u),W=o(u,"P",{});var ps=l(W);nt=n(ps,"Alt brand colour accessible with main"),ps.forEach(s),rt=d(u),J=o(u,"P",{});var cs=l(J);pt=n(cs,"Light background colour"),cs.forEach(s),ct=d(u),K=o(u,"P",{});var ds=l(K);dt=n(ds,"Gray text accessible on white"),ds.forEach(s),ht=d(u),Q=o(u,"P",{});var hs=l(Q);ut=n(hs,"Gray text accessible on light background colour"),hs.forEach(s),ft=d(u),X=o(u,"P",{});var us=l(X);mt=n(us,"Gray text accessible on Alt brand colour accessible with main"),us.forEach(s),u.forEach(s),bt=d(m),Y=o(m,"LI",{});var fs=l(Y);Z=o(fs,"P",{});var ms=l(Z);vt=n(ms,"Custom button style"),ms.forEach(s),fs.forEach(s),wt=d(m),$=o(m,"LI",{});var bs=l($);ee=o(bs,"P",{});var vs=l(ee);kt=n(vs,"Border radius style"),vs.forEach(s),bs.forEach(s),yt=d(m),te=o(m,"LI",{});var ws=l(te);se=o(ws,"P",{});var ks=l(se);_t=n(ks,"Side spacing"),ks.forEach(s),ws.forEach(s),Et=d(m),ae=o(m,"LI",{});var ys=l(ae);oe=o(ys,"P",{});var _s=l(oe);gt=n(_s,`Font/sizes:
smallbold
small
regular
subtitle
title
header`),_s.forEach(s),ys.forEach(s),It=d(m),le=o(m,"LI",{});var Es=l(le);ie=o(Es,"P",{});var gs=l(ie);Pt=n(gs,`Shadows
header shadow (global.scss:177)
button shadow`),gs.forEach(s),Es.forEach(s),m.forEach(s),me=d(e),x=o(e,"P",{});var Is=l(x);Tt=n(Is,"There are some other properties I could encorporate, but I\u2019ll start with these 6 tokens for now."),Is.forEach(s),be=d(e),S=o(e,"H3",{});var Ps=l(S);xt=n(Ps,"Step 2: Using the Tokens"),Ps.forEach(s),ve=d(e),A=o(e,"P",{});var Ts=l(A);St=n(Ts,"Now that I have my tokens, I need to update my app to use them. From there I\u2019ll be able to change the tokens for each brand, and apply them to the app."),Ts.forEach(s),we=d(e),C=o(e,"P",{});var xs=l(C);At=n(xs,"This is actually the most difficult/time-consuming part of the process because it involved looking into each and every existing colour variable reference to ensure proper accessibility. The other tokens also required individual checking to find values that were not made into variables. It took a couple days to complete."),xs.forEach(s),ke=d(e),w=o(e,"P",{});var je=l(w);Ct=n(je,"As I did this I also made a custom "),ne=o(je,"CODE",{});var Ss=l(ne);jt=n(Ss,".scss"),Ss.forEach(s),Lt=n(je," file for each theme where I could keep new styles that are specific to a certain theme (adjusted layouts or button configurations)."),je.forEach(s),ye=d(e),j=o(e,"H3",{});var As=l(j);Dt=n(As,"Step 3: Repo Re-Organization"),As.forEach(s),_e=d(e),L=o(e,"P",{});var Cs=l(L);Mt=n(Cs,"I\u2019ll be using some npm scripts in order to move around finds before running my code. This was probably not the best method (that\u2019d be using Gulp), but the easiest to implement."),Cs.forEach(s),Ee=d(e),k=o(e,"P",{});var Le=l(k);Ot=n(Le,"Here is an example of my "),re=o(Le,"CODE",{});var js=l(re);qt=n(js,"package.json"),js.forEach(s),Gt=n(Le,"\u2019s npm scripts:"),Le.forEach(s),ge=d(e),I=o(e,"PRE",{class:!0});var Rs=l(I);Rs.forEach(s),Ie=d(e),y=o(e,"P",{});var De=l(y);Ft=n(De,"As you can see all I\u2019m doing is moving files from a hidden folder (so it doesn\u2019t get included in build) and using "),P=o(De,"A",{href:!0,rel:!0});var Ls=l(P);Ht=n(Ls,"copyfiles"),Ls.forEach(s),Rt=n(De," to move and replace the files."),De.forEach(s),Pe=d(e),_=o(e,"P",{});var Me=l(_);zt=n(Me,"So now all I need to do to change my app\u2019s theme is to run "),pe=o(Me,"CODE",{});var Ds=l(pe);Bt=n(Ds,"npm run serve:theme_name"),Ds.forEach(s),Ut=n(Me," and it\u2019ll completely change the app to a custom stream I\u2019ve created."),Me.forEach(s),Te=d(e),D=o(e,"H3",{});var Ms=l(D);Nt=n(Ms,"Results and Comments"),Ms.forEach(s),xe=d(e),E=o(e,"P",{});var Oe=l(E);Vt=n(Oe,"Using this method for a couple weeks has been awesome. The custom "),ce=o(Oe,"CODE",{});var Os=l(ce);Wt=n(Os,".scss"),Os.forEach(s),Jt=n(Oe," file has come in handy several times and the theme switching has worked will."),Oe.forEach(s),Se=d(e),M=o(e,"P",{});var qs=l(M);Kt=n(qs,"The biggest problem I\u2019ve had however is maintainence and new features. Making edits to sections of the copied files means making edits to the files of each theme instance, it adds up to a lot of edits. It requires careful attention to ensure that the new edits/features work for each theme - something that\u2019s a bit unruly in practice but is managable when not rushing."),qs.forEach(s),Ae=d(e),O=o(e,"P",{});var Gs=l(O);Qt=n(Gs,"Overall this is a really cool way to extend a single codebase for multiple clients."),Gs.forEach(s),this.h()},h(){de(g,"href","https://www.lightningdesignsystem.com/design-tokens"),de(g,"rel","nofollow"),de(I,"class","language-json"),de(P,"href","https://github.com/calvinmetcalf/copyfiles"),de(P,"rel","nofollow")},m(e,r){p(e,b,r),t(b,qe),t(b,q),t(q,Ge),t(b,Fe),p(e,he,r),p(e,T,r),t(T,He),p(e,ue,r),p(e,v,r),t(v,Re),t(v,g),t(g,ze),t(v,Be),p(e,fe,r),p(e,f,r),t(f,h),t(h,G),t(G,Ue),t(h,Ne),t(h,F),t(F,Ve),t(h,We),t(h,H),t(H,Je),t(h,Ke),t(h,R),t(R,Qe),t(h,Xe),t(h,z),t(z,Ye),t(h,Ze),t(h,B),t(B,$e),t(h,et),t(h,U),t(U,tt),t(h,st),t(h,N),t(N,at),t(h,ot),t(h,V),t(V,lt),t(h,it),t(h,W),t(W,nt),t(h,rt),t(h,J),t(J,pt),t(h,ct),t(h,K),t(K,dt),t(h,ht),t(h,Q),t(Q,ut),t(h,ft),t(h,X),t(X,mt),t(f,bt),t(f,Y),t(Y,Z),t(Z,vt),t(f,wt),t(f,$),t($,ee),t(ee,kt),t(f,yt),t(f,te),t(te,se),t(se,_t),t(f,Et),t(f,ae),t(ae,oe),t(oe,gt),t(f,It),t(f,le),t(le,ie),t(ie,Pt),p(e,me,r),p(e,x,r),t(x,Tt),p(e,be,r),p(e,S,r),t(S,xt),p(e,ve,r),p(e,A,r),t(A,St),p(e,we,r),p(e,C,r),t(C,At),p(e,ke,r),p(e,w,r),t(w,Ct),t(w,ne),t(ne,jt),t(w,Lt),p(e,ye,r),p(e,j,r),t(j,Dt),p(e,_e,r),p(e,L,r),t(L,Mt),p(e,Ee,r),p(e,k,r),t(k,Ot),t(k,re),t(re,qt),t(k,Gt),p(e,ge,r),p(e,I,r),I.innerHTML=Hs,p(e,Ie,r),p(e,y,r),t(y,Ft),t(y,P),t(P,Ht),t(y,Rt),p(e,Pe,r),p(e,_,r),t(_,zt),t(_,pe),t(pe,Bt),t(_,Ut),p(e,Te,r),p(e,D,r),t(D,Nt),p(e,xe,r),p(e,E,r),t(E,Vt),t(E,ce),t(ce,Wt),t(E,Jt),p(e,Se,r),p(e,M,r),t(M,Kt),p(e,Ae,r),p(e,O,r),t(O,Qt)},p:Xt,i:Xt,o:Xt,d(e){e&&s(b),e&&s(he),e&&s(T),e&&s(ue),e&&s(v),e&&s(fe),e&&s(f),e&&s(me),e&&s(x),e&&s(be),e&&s(S),e&&s(ve),e&&s(A),e&&s(we),e&&s(C),e&&s(ke),e&&s(w),e&&s(ye),e&&s(j),e&&s(_e),e&&s(L),e&&s(Ee),e&&s(k),e&&s(ge),e&&s(I),e&&s(Ie),e&&s(y),e&&s(Pe),e&&s(_),e&&s(Te),e&&s(D),e&&s(xe),e&&s(E),e&&s(Se),e&&s(M),e&&s(Ae),e&&s(O)}}}const Ws={title:"Creating a Variable Design System",description:"The brief for this project is to create an Ionic app that can be re-themed based on different brands.",date:"2020-01-18",published:!0,oldslugthing:"/Creating-a-Variable-Design-System",cover:"/post-images/arjun2020.jpg"};class Js extends zs{constructor(b){super(),Bs(this,b,null,Ns,Us,{})}}export{Js as default,Ws as metadata};
